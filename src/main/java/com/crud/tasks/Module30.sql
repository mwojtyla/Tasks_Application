set global log_bin_trust_function_creators = 1;

CREATE TABLE BOOKS
(
    BOOK_ID int(11)      NOT NULL AUTO_INCREMENT,
    TITLE   varchar(255) NOT NULL,
    PUBYEAR int(4)       NOT NULL,
    PRIMARY KEY (BOOK_ID)
);

CREATE TABLE READERS
(
    READER_ID int(11)      NOT NULL AUTO_INCREMENT,
    FIRSTNAME varchar(255) NOT NULL,
    LASTNAME  varchar(255) NOT NULL,
    PESELID   varchar(11)  NOT NULL,
    PRIMARY KEY (READER_ID)
);

CREATE TABLE RENTS
(
    RENT_ID     int(11)  NOT NULL AUTO_INCREMENT,
    BOOK_ID     int(11)  NOT NULL,
    READER_ID   int(11)  NOT NULL,
    RENT_DATE   datetime NOT NULL,
    RETURN_DATE datetime,
    PRIMARY KEY (RENT_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (BOOK_ID),
    FOREIGN KEY (READER_ID) REFERENCES READERS (READER_ID)
);

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('John', 'Smith', '83012217938');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Curtis', 'Wilson', '75121002790');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Cathy', 'Booker', '90112801727');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Marissa', 'Cain', '84061908044');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Muriel', 'Fulton', '76081409269');

COMMIT;

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('The Stranger', 1942);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('In Search of Lost Time', 1927);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('The Trial', 1925);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('The Little Prince', 1943);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('Man''s Fate', 1933);

COMMIT;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (4, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 5 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 3, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 3, DATE_SUB(CURDATE(), INTERVAL 4 DAY), DATE_SUB(CURDATE(), INTERVAL 2 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 4, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 8 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 5, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

COMMIT;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
SELECT * FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();

DROP PROCEDURE IF EXISTS ListBooks;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
SELECT BOOK_ID, TITLE, PUBYEAR FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();

DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel() RETURNS VARCHAR(20)
    DETERMINISTIC
BEGIN
RETURN 'Standard customer';
END $$

DELIMITER ;

SELECT VipLevel() AS LEVEL;

DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel(booksrented INT) RETURNS VARCHAR(20)
    DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
    IF booksrented >= 10 THEN
        SET result = 'Gold customer';
    ELSEIF booksrented >= 5 AND booksrented < 10 THEN
        SET result = 'Silver customer';
    ELSEIF booksrented >= 2 AND booksrented < 5 THEN
        SET result = 'Bronze customer';
ELSE
        SET result = 'Standard customer';
END IF;
RETURN result;
END $$

DELIMITER ;

SELECT VipLevel(12) AS LEVEL;



DROP PROCEDURE IF EXISTS ReaderNameById;

DELIMITER $$
CREATE PROCEDURE ReaderNameById(USER_ID INT)
BEGIN
    DECLARE invalidIdInfo VARCHAR(20) DEFAULT ('Invalid Id number');
    IF  USER_ID <= 0 THEN
SELECT invalidIdInfo ;
ELSEIF USER_ID > 0 THEN
SELECT FIRSTNAME, LASTNAME FROM READERS
WHERE READER_ID = USER_ID;
END IF;
END $$
DELIMITER ;

CALL ReaderNameById(1);


ALTER TABLE READERS ADD VIP_LEVEL VARCHAR(20);


DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);

SELECT COUNT(*) FROM RENTS
WHERE READER_ID = 3
    INTO BOOKSREAD;

SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) FROM RENTS
WHERE READER_ID = 3
    INTO DAYS;

SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

SELECT BOOKSREAD, DAYS, BOOKSPERMONTH;
END $$

DELIMITER ;

CALL UpdateVipLevels();


DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD, DAYS, RDR_ID INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_READERS CURSOR FOR SELECT READER_ID FROM READERS;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
OPEN ALL_READERS;
WHILE (FINISHED = 0) DO
    FETCH ALL_READERS INTO RDR_ID;
    IF (FINISHED = 0) THEN
SELECT COUNT(*) FROM RENTS
WHERE READER_ID = RDR_ID
    INTO BOOKSREAD;

SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
WHERE READER_ID = RDR_ID
    INTO DAYS;

SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

UPDATE READERS SET VIP_LEVEL = VipLevel(BOOKSPERMONTH)
WHERE READER_ID = RDR_ID;
COMMIT;
END IF;
END WHILE;

CLOSE ALL_READERS;
END $$

DELIMITER ;

CALL UpdateVipLevels();

SELECT * From Readers;



################################################

ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN;

DROP FUNCTION IF EXISTS Bestseller;

DELIMITER $$
CREATE FUNCTION Bestseller(booksrented INT) RETURNS BOOLEAN DETERMINISTIC
BEGIN
    DECLARE result BOOLEAN DEFAULT 0;
    IF booksrented > 2 THEN
        SET result = 1;
END IF;
RETURN result;
END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$
CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE BOOKSRENTED, B_ID INT;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
OPEN ALL_BOOKS;
WHILE (FINISHED = 0) DO
        FETCH ALL_BOOKS INTO B_ID;
        IF (FINISHED = 0) THEN
SELECT COUNT(*) FROM RENTS
WHERE BOOK_ID = B_ID
    INTO BOOKSRENTED;

UPDATE BOOKS SET BESTSELLER = Bestseller(BOOKSRENTED)
WHERE BOOK_ID = B_ID;
COMMIT;
END IF;
END WHILE;

CLOSE ALL_BOOKS;
END $$
DELIMITER ;

CALL UpdateBestsellers();
SELECT * FROM BOOKS;

Show create procedure UpdateVipLevels;

Select * from readers;
Select * from books;
######################################################## modu≈Ç 30.4
SET @RENTSQTY = 0;                                 -- [1]

DELIMITER $$

CREATE TRIGGER RENTSCOUNTER BEFORE INSERT ON RENTS -- [2]
    FOR EACH ROW
BEGIN
    SET @RENTSQTY = @RENTSQTY + 1;                  -- [3]
END $$

DELIMITER ;


INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(1, 3, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 3, DATE_SUB(CURDATE(), INTERVAL 2 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(3, 1, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 4, DATE_SUB(CURDATE(), INTERVAL 3 DAY), NULL);

COMMIT;

SELECT  @RENTSQTY ;

DROP TRIGGER RENTSCOUNTER;


CREATE TABLE RENTS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           RENT_ID INT(11) NOT NULL,
                           OLD_BOOK_ID INT(11),
                           NEW_BOOK_ID INT(11),
                           OLD_READER_ID INT(11),
                           NEW_READER_ID INT(11),
                           OLD_RENT_DATE DATETIME,
                           NEW_RENT_DATE DATETIME,
                           OLD_RETURN_DATE DATETIME,
                           NEW_RETURN_DATE DATETIME,
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER RENTS_INSERT AFTER INSERT ON RENTS                                        -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,   -- [2]
                           NEW_RENT_DATE, NEW_RETURN_DATE)                                -- [3]
        VALUE(CURTIME(), 'INSERT', NEW.RENT_ID, NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE, -- [4]
              NEW.RETURN_DATE);                                                            -- [5]
END $$

DELIMITER ;

INSERT INTO RENTS (BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 4, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

COMMIT;

SELECT * from RENTS_AUD;

DELIMITER $$

CREATE TRIGGER RENTS_DELETE AFTER DELETE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID)
        VALUE(CURTIME(), 'DELETE', OLD.RENT_ID);
END $$

DELIMITER ;

DELETE FROM RENTS WHERE RENT_ID = 12;

COMMIT;

SELECT * from rents;
SELECT * from RENTS_AUD;


DELIMITER $$

CREATE TRIGGER RENTS_UPDATE AFTER UPDATE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,
                           NEW_RENT_DATE, NEW_RETURN_DATE, OLD_BOOK_ID, OLD_READER_ID,
                           OLD_RENT_DATE, OLD_RETURN_DATE)
        VALUE(CURTIME(), 'UPDATE', OLD.RENT_ID, NEW.BOOK_ID, NEW.READER_ID,
              NEW.RENT_DATE, NEW.RETURN_DATE, OLD.BOOK_ID, OLD.READER_ID,
              OLD.RENT_DATE, OLD.RETURN_DATE);
END $$

DELIMITER ;

UPDATE RENTS SET RETURN_DATE = CURDATE()
WHERE RENT_ID = 11;

COMMIT;

SELECT * from RENTS_AUD;

######################################################## zadania 30.4

CREATE TABLE BOOKS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           OLD_TITLE VARCHAR(255),
                           NEW_TITLE VARCHAR(255),
                           OLD_PUBYEAR INT(4),
                           NEW_PUBYEAR INT(4),
                           OLD_BESTSELLER BOOLEAN,
                           NEW_BESTSELLER BOOLEAN,
                           PRIMARY KEY (EVENT_ID)
);

CREATE TABLE READERS_AUD (
                             EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                             EVENT_DATE DATETIME NOT NULL,
                             EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                             READER_ID INT(11) NOT NULL,
                             OLD_FIRSTNAME VARCHAR(255),
                             NEW_FIRSTNAME VARCHAR(255),
                             OLD_LASTNAME VARCHAR(255),
                             NEW_LASTNAME VARCHAR(255),
                             OLD_PESELID VARCHAR(11),
                             NEW_PESELID VARCHAR(11),
                             OLD_VIP_LEVEL VARCHAR(20),
                             NEW_VIP_LEVEL VARCHAR(20),
                             PRIMARY KEY (EVENT_ID)
);

DELIMITER $$
CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR, NEW_BESTSELLER)
        VALUE(CURTIME(), 'INSERT', NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER);
END $$
DELIMITER ;

INSERT INTO BOOKS (TITLE, PUBYEAR, BESTSELLER)
VALUES ('The Notebook', 1997, true);
COMMIT;

SELECT * FROM BOOKS_AUD;

DELIMITER $$
CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR, NEW_BESTSELLER, OLD_TITLE, OLD_PUBYEAR, OLD_BESTSELLER)
        VALUE(CURTIME(), 'UPDATE', OLD.BOOK_ID, NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER, OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER);
END $$
DELIMITER ;

SELECT * FROM BOOKS;

UPDATE BOOKS SET PUBYEAR = 1996
WHERE BOOK_ID = 6;
COMMIT;

SELECT * FROM BOOKS_AUD;

DELIMITER $$
CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID)
        VALUE(CURTIME(), 'DELETE', OLD.BOOK_ID);
END $$
DELIMITER ;

DELETE FROM BOOKS WHERE BOOK_ID = 6;
COMMIT;

SELECT * FROM BOOKS_AUD;


DELIMITER $$
CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID, NEW_VIP_LEVEL)
        VALUE(CURTIME(), 'INSERT', NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);
END $$
DELIMITER ;

INSERT INTO READERS (FIRSTNAME, LASTNAME, PESELID, VIP_LEVEL)
VALUES ('Jean', 'Cruz', '80010100999', 'Standard customer');
COMMIT;

SELECT * FROM READERS_AUD;

DELIMITER $$
CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID, NEW_VIP_LEVEL, OLD_FIRSTNAME, OLD_LASTNAME, OLD_PESELID, OLD_VIP_LEVEL)
        VALUE(CURTIME(), 'UPDATE', OLD.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL, OLD.FIRSTNAME, OLD.LASTNAME, OLD.PESELID, OLD.VIP_LEVEL);
END $$
DELIMITER ;

SELECT * FROM READERS;

UPDATE READERS SET VIP_LEVEL = 'Gold customer'
WHERE READER_ID = 6;
COMMIT;

SELECT * FROM READERS_AUD;

DELIMITER $$
CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE(CURTIME(), 'DELETE', OLD.READER_ID);
END $$
DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 9;
COMMIT;

SELECT * FROM READERS_AUD;

##################################################################### modu≈Ç 30.5
CREATE VIEW BOOKS_AND_READERS AS
SELECT RD.READER_ID, RD.FIRSTNAME, RD.LASTNAME, BK.TITLE, RT.RENT_DATE, RT.RETURN_DATE
FROM READERS RD, BOOKS BK, RENTS RT
WHERE RT.BOOK_ID = BK.BOOK_ID
  AND RT.READER_ID = RD.READER_ID
ORDER BY RT.RENT_DATE;

SELECT * FROM BOOKS_AND_READERS;

SELECT * FROM BOOKS_AND_READERS
WHERE RENT_DATE > DATE_SUB(CURDATE(), INTERVAL 5 DAY);



SHOW PROCESSLIST;

USE KODILLA_COURSE;

CREATE EVENT UPDATE_VIPS
    ON SCHEDULE EVERY 1 MINUTE
    DO CALL UpdateVipLevels();

UPDATE READERS
SET VIP_LEVEL  ='Not set';

SELECT * FROM READERS;

################################################# ZADANIE 30.5
CREATE TABLE STATS (
                       STAT_ID INT(11) AUTO_INCREMENT PRIMARY KEY,
                       STAT_DATE DATETIME NOT NULL,
                       STAT VARCHAR(20) NOT NULL,
                       VALUE INT(11) NOT NULL
);

CREATE VIEW BESTSELLERS_COUNT AS
SELECT COUNT(*) FROM BOOKS
WHERE BOOKS.BESTSELLER = TRUE;

SELECT * FROM BESTSELLERS_COUNT;


USE KODILLA_COURSE;

CREATE EVENT UPDATE_BESTSELLERS
    ON SCHEDULE EVERY 1 MINUTE
    DO
BEGIN
         DECLARE counter INT;
CALL UpdateBestsellers();
SELECT * FROM BESTSELLERS_COUNT
    INTO counter;
INSERT INTO STATS(STAT_DATE, STAT, VALUE)
VALUES (CURDATE(),'BESTSELLERS',counter);
END;

UPDATE BOOKS
SET BESTSELLER = FALSE;

SELECT * FROM BOOKS;
SELECT * FROM STATS;
SHOW PROCESSLIST;